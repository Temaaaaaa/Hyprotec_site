// api/contact.js
/**
 * Serverless-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ HYPROTEC.
 * –û–∂–∏–¥–∞–µ—Ç JSON –æ—Ç —Ñ—Ä–æ–Ω—Ç–∞: { name, phone, email, topic, message, agree, company }
 * –®–ª—ë—Ç –∑–∞—è–≤–∫—É –≤ Telegram. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { success, message }.
 */

function s(str = "", max = 500) {
    // –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ + —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è HTML –≤ Telegram
    return String(str)
        .slice(0, max)
        .replaceAll("&", "&amp;")
        .replaceAll("<", "&lt;")
        .replaceAll(">", "&gt;");
}

export default async function handler(req, res) {
    try {
        if (req.method !== "POST") {
            return res
                .status(405)
                .json({ success: false, message: "Method Not Allowed" });
        }

        // --- –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥–∞ ---
        const body = req.body || (await readJson(req));
        const {
            name = "",
            phone = "",
            email = "",
            topic = "",
            message = "",
            agree = false,
            company = "", // honeypot ‚Äî –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç
        } = body || {};

        // --- –ê–Ω—Ç–∏—Å–ø–∞–º: honeypot ---
        if (company && String(company).trim() !== "") {
            // –¥–µ–ª–∞–µ–º –≤–∏–¥, —á—Ç–æ –≤—Å—ë –æ–∫, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            return res
                .status(200)
                .json({ success: true, message: "–°–ø–∞—Å–∏–±–æ! –ú—ã –Ω–∞ —Å–≤—è–∑–∏." });
        }

        // --- –í–∞–ª–∏–¥–∞—Ü–∏—è ---
        const hasName = String(name).trim().length >= 1;
        const hasMsg = String(message).trim().length >= 1;
        const hasPhone = String(phone).trim().length >= 10;
        const hasEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(String(email).trim());
        const contactOk = hasPhone || hasEmail;

        if (!hasName) {
            return res
                .status(422)
                .json({ success: false, message: "–£–∫–∞–∂–∏—Ç–µ –∏–º—è." });
        }
        if (!hasMsg) {
            return res
                .status(422)
                .json({ success: false, message: "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å." });
        }
        if (!contactOk) {
            return res.status(422).json({
                success: false,
                message: "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email ‚Äî –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            });
        }
        if (String(agree) !== "true" && agree !== true) {
            return res.status(422).json({
                success: false,
                message: "–ù—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
            });
        }

        // --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
        const SITE = process.env.SITE_NAME || "HYPROTEC";
        const ua = req.headers["user-agent"] || "";
        const ipHeader = req.headers["x-forwarded-for"] || req.headers["x-real-ip"] || "";
        const ip = Array.isArray(ipHeader)
            ? ipHeader[0]
            : String(ipHeader).split(",")[0]?.trim();

        const lines = [
            `<b>üßæ –ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ ${s(SITE, 60)}</b>`,
            `‚Äî <b>–ò–º—è:</b> ${s(name, 120)}`,
            hasPhone ? `‚Äî <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${s(phone, 60)}` : "",
            hasEmail ? `‚Äî <b>Email:</b> ${s(email, 120)}` : "",
            topic ? `‚Äî <b>–¢–µ–º–∞:</b> ${s(topic, 120)}` : "",
            `‚Äî <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${s(message, 2000)}`,
            "",
            ip ? `<i>IP:</i> ${s(ip, 60)}` : "",
            ua ? `<i>UA:</i> ${s(ua, 200)}` : "",
        ]
            .filter(Boolean)
            .join("\n");

        // --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ---
        const token = process.env.TG_BOT_TOKEN;
        const chatId = process.env.TG_CHAT_ID;

        if (!token || !chatId) {
            console.error("TG env not set");
            return res.status(500).json({
                success: false,
                message: "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            });
        }

        const tgUrl = `https://api.telegram.org/bot${token}/sendMessage`;
        const tgResp = await fetch(tgUrl, {
            method: "POST",
            headers: { "content-type": "application/json" },
            body: JSON.stringify({
                chat_id: chatId,
                text: lines,
                parse_mode: "HTML",
                disable_web_page_preview: true,
            }),
        });

        if (!tgResp.ok) {
            const errText = await safeText(tgResp);
            console.error("Telegram error:", tgResp.status, errText);
            return res.status(502).json({
                success: false,
                message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            });
        }

        // –£—Å–ø–µ—Ö
        return res
            .status(200)
            .json({ success: true, message: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!" });
    } catch (e) {
        console.error("Handler error:", e);
        return res
            .status(500)
            .json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." });
    }
}

/** Helpers **/
async function readJson(req) {
    if (req.body && typeof req.body === "object") return req.body;
    const chunks = [];
    for await (const ch of req) chunks.push(ch);
    const raw = Buffer.concat(chunks).toString("utf8");
    try {
        return JSON.parse(raw || "{}");
    } catch {
        return {};
    }
}
async function safeText(resp) {
    try {
        return await resp.text();
    } catch {
        return "<no text>";
    }
}
